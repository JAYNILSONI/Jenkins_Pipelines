pipeline:
  agent:
    any: true
  
  parameters:
    - string:
        name: BRANCH_NAME
        defaultValue: 'main'
        description: 'Branch to build and deploy'
        trim: true
  
  stages:
    - stage: "Checkout_Stage"
      steps:
        - echo "Cleaning up the Workspace"
        - deleteDir()
        - echo "Checking out the Repository"
        - bat 'git clone https://github.com/JAYNILSONI/Jenkins_Pipelines.git .'
        - bat "git checkout ${params.BRANCH_NAME}"
    
    - stage: "Validate_Branch"
      steps:
        - script:
            def validDevBranches = ['develop', 'dev', 'feature/*']
            def validMainBranches = ['main', 'master', 'release/*']
            
            def isDevBranch = validDevBranches.any { 
              params.BRANCH_NAME ==~ it.replace('*', '.*') 
            }
            
            def isMainBranch = validMainBranches.any { 
              params.BRANCH_NAME ==~ it.replace('*', '.*') 
            }
            
            if (isDevBranch) {
              echo "Development branch detected: ${params.BRANCH_NAME}"
            } else if (isMainBranch) {
              echo "Main branch detected: ${params.BRANCH_NAME}"
            } else {
              error "Unsupported branch: ${params.BRANCH_NAME}"
            }
    
    - stage: "Dev_Specific_Stages"
      when:
        expression { 
          def devBranches = ['develop', 'dev']
          return devBranches.contains(params.BRANCH_NAME) || params.BRANCH_NAME.startsWith('feature/') 
        }
      steps:
        - echo "Running Dev-specific stages"
        - bat 'mvn clean'
        - bat 'mvn compile'
        - bat 'mvn test'
    
    - stage: "Main_Branches_Stages"
      when:
        expression { 
          def mainBranches = ['main', 'master']
          return mainBranches.contains(params.BRANCH_NAME) || params.BRANCH_NAME.startsWith('release/') 
        }
      steps:
        - echo "Running Main branch stages"
        - bat 'mvn clean verify'
        - bat 'mvn package'
    
    - stage: "Package_Stage"
      steps:
        - echo "Packaging the Project"
        - bat 'mvn package'
    
    - stage: "Deploy_Stage"
      when:
        expression { 
          def deployableBranches = ['main', 'master', 'release/*']
          return deployableBranches.any { 
            params.BRANCH_NAME ==~ it.replace('*', '.*') 
          } 
        }
      steps:
        - echo "Deploying to Production"
        - bat 'mvn deploy'
  
  post:
    always:
      - echo "Performing Final Cleanup"
      - deleteDir()
    
    success:
      - echo "Pipeline completed successfully for branch: ${params.BRANCH_NAME}"
    
    failure:
      - echo "Pipeline failed for branch: ${params.BRANCH_NAME}"
